#!/usr/bin/env node

const fs = require('fs')
const {resolve, basename, extname} = require('path')
const svgsus = require('..')
const {version} = require('../package.json')
const {docopt} = require('docopt')

const usage = `
Svgsus - Organize, clean and transform your SVGs

  Usage: svgsus <format> [options] [--] [<file>...]

    svgsus svg [--codeIndent=<indent> --compressed --output=<dir>] [--] [<file>...]
    svgsus (pug|jade) [--codeIndent=<indent> --output=<dir>] [--] [<file>...]
    svgsus cashapelayer [--codeIndent=<indent> --codeType=<type> --output=<dir>] [--] [<file>...]
    svgsus uibeziershape [--codeType=<type> --output=<dir>] [--] [<file>...]
    svgsus vectordrawable [--codeIndent=<indent> --output=<dir>] [--] [<file>...]
    svgsus -h | --help
    svgsus --version

  Options:
    --compressed           wether the output should have whitespace stripped
    --codeIndent=<indent>  must be whitespace [default: "  "]
    --codeType=<type>      must be either "AppKit" or "UIKit" [default: UIKit]
    --output=<dir>         a directory to write converted files to, defaults to
                           current directory if any <file>s are specified

`

const program = docopt(usage, {version: version})
const format = program['<format>']

if (format in svgsus) {
  const files = program['<file>']
  const options = Object
    .keys(program)
    .filter(k => k.indexOf('--') == 0)
    .reduce((opts, k) => Object.assign(opts, {[k.slice(2)]: program[k]}, {}))

  // special case for --codeIndent since default whitespace is stripped
  if (options.codeIndent[0] === '"') {
    options.codeIndent = JSON.parse(options.codeIndent)
  }

  if (files.length) {
    const directory = resolve(program['<output>'] || '.')

    files
      .map(file =>
        svgsus[format].convert(fs.readFileSync(resolve(file), 'utf8'), options)
          .then(output => fs.writeFileSync(resolve(directory, basename(file, extname(file)) + svgsus[format].extension), output))
          .catch(error => {
            process.stderr.write(error.message + '\n')
            process.exit(1)
          })
      )
  } else {
    const path = resolve('/dev/stdin')
    const input = fs.readFileSync(path, 'utf8')
    svgsus[format].convert(input, options)
      .then(output => console.log(output))
      .catch(error => {
        process.stderr.write(error.message + '\n')
        process.exit(1)
      })
  }
} else {
  process.stderr.write(format + ' is not a valid format\n\n')
  process.stderr.write(usage)
  process.exit(1)
}